#集合是没有value的字典 无序 不可重复 可变序列
#集合中的元素不允许重复

print('---------------------------集合的创建-----------------------------------')
#方式一 花括号{}
s={2,3,4,5,5,6,7,7}
print(s) #{2, 3, 4, 5, 6, 7} 集合中的元素不允许重复 自动去重

#方式二 内置函数set()

#通过range()获取数据
s = set(range(6)) #range(6)->产生一个0到5的整数序列
print(s,type(s)) #{0, 1, 2, 3, 4, 5} <class 'set'>
#通过列表转为集合
s=set([1,2,4,4,5,6,6])
print(s,type(s)) #{1, 2, 4, 5, 6} <class 'set'>
#通过元组转为集合
s=set((1,2,3,3,4,5,5))
print(s,type(s)) #{1, 2, 3, 4, 5} <class 'set'>
#通过字符串转为集合
s=set('python')
print(s,type(s)) #{'y', 'p', 'h', 't', 'o', 'n'} <class 'set'>  --列表元素无序
#通过set集合转为集合
s=set({1,22,3,4,4,6,89})
print(s,type(s)) #{1, 3, 4, 6, 22, 89} <class 'set'>

#定义一个空集合
s={}
print(s,type(s)) #{} <class 'dict'> 方法错误 创建出来的类型是字典
s=set()
print(s,type(s)) #set() <class 'set'>



print('---------------------------集合的查询-----------------------------------')
#in   not in
s={2,3,4,5,5,6,7,7}
print(2 in s) #True
print(100 in s) #False
print(5 not in s) #False
print(100 not in s) #True


print('---------------------------集合的新增操作-----------------------------------')
s={2,3,4,7,100}
#方式一 add() 一次添加一个元素
s.add(80)
print(s) #{2, 3, 100, 4, 7, 80}

#方式二 update()  一次至少添加一个元素

#添加集合类型的数据
s.update({200,300})
print(s) #{2, 3, 100, 4, 7, 200, 300, 80}

#添加列表类型的数据
s.update([400,500])
print(s) #{2, 3, 100, 4, 7, 200, 300, 80, 400, 500}

#添加元组类型的数据
s.update((600,700))
print(s) #{2, 3, 100, 4, 7, 200, 300, 80, 400, 500, 600, 700}



print('---------------------------集合的删除操作-----------------------------------')
s={2,3,4,7,100}

#remove()  一次删除一个指定元素 删除对象不存在时抛出KeyError
s.remove(100)
print(s) #{2, 3, 4, 7}
#s.remove(500) #报错 KeyError

#s.discard() 一次删除一个指定元素 删除对象不存在时不报错
s.discard(500)
s.discard(2)
print(s) #{3, 4, 7}

#pop() 一次删除一个任意元素
s.pop()
print(s) #{4, 7}
#s.pop(4) #报错 不能指定元素删除

#clear() 清空集合
s.clear()
print(s) #set()




print('---------------------------集合之间的关系-----------------------------------')
#两个集合是否相等（值相同 就相等）
s1={10,20,30,40}
s2={40,30,20,10}
print(s1==s2) #True
print(s1!=s2) #False

#一个集合是否是另一个的子集
s1={10,20,30,40,50,60}
s2={40,30,20,10}
s3={10,20,30,90}
print(s2.issubset(s1)) #True
print(s3.issubset(s1)) #False

#一个集合是否是另一个的超集
print(s1.issuperset(s2)) #True
print(s1.issuperset(s3)) #False

#两个集合是否含有交集
s4={100,200}
print(s1.isdisjoint(s2)) #False 有交集
print(s1.isdisjoint(s4)) #True 无交集




print('---------------------------集合的数学操作-----------------------------------')
#交集
s1={10,20,30,40}
s2={20,30,40,50,60}
print(s1.intersection(s2)) #{40, 20, 30}
print(s1 & s2) #{40, 20, 30}
#intersection()方法与‘&’等价 都是取交集

#并集
print(s1.union(s2)) #{40, 10, 50, 20, 60, 30}
print(s1 | s2) #{40, 10, 50, 20, 60, 30}
#union()与‘|’等价 都是取并集

#差集
print(s1.difference(s2)) #{10}
#差集操作 不改变原有集合

#对称差集(取两者的差集)
print(s1.symmetric_difference(s2)) #{50, 10, 60}
print(s1 ^ s2) #{50, 10, 60}
#symmetric_difference()方法与‘^’等价 都是取对称差集




print('---------------------------集合生成式-----------------------------------')
#把列表的[]改为{}
#列表生成式
l1=[i*i for i in range(10)]
print(l1) #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

#集合生成式
l1={i*i for i in range(10)}
print(l1) #{0, 1, 64, 4, 36, 9, 16, 49, 81, 25} 集合无序
