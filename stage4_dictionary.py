#字典 无序 键唯一
#不可变序列：无法在原来的基础上做更改 （整数序列、字符串序列也是不可变序列)
#可变序列：可以在原来的基础上增删改 （列表、字典）

print('---------------------------字典的创建-----------------------------------')
#方式一：花括号
d1={'张三':10,'lisi':20,'wangwu':30}
print(d1,type(d1))
#方式二：使用内置函数dict()
d2 = dict(name = 'jack',ag = 21)
print(d2)

#创建空字典
d3={}
print(d3)


print('---------------------------字典元素的获取-----------------------------------')
d1={'张三':10,'lisi':20,'wangwu':30}
#方式一：使用方括号
print(d1['张三'])
#方式二 使用get()方法
print(d1.get('张三'))
#以上两种方法的区别  若key不存在 []方式会报错， get()方式不会报错 获取到的为None
#print(d1['张四']) #报错KeyError
print(d1.get('张四')) #None
print(d1.get('麻⑦',100)) #100是查找’麻⑦‘所对应的value不存在时提供的默认值


print('------------------------字典key是否存在或不存在--------------------------------')
d1={'张三':10,'lisi':20,'wangwu':30}
print('张三' in d1) #True
print('张三' not in d1) #False


print('---------------------------字典元素的删除-----------------------------------')
d1={'张三':10,'lisi':20,'wangwu':30}
#根据指定元素的键删除元素
del d1['张三'] #{'lisi': 20, 'wangwu': 30}
print(d1)
#清空字典的元素
d1.clear()
print(d1) #{}
#删除字典
del d1
#print(d1) #报错'd1' is not defined



print('---------------------------字典元素的新增-----------------------------------')
d1={'张三':10,'lisi':20,'wangwu':30}
#新增元素
d1['陈六']=40
print(d1)


print('---------------------------字典元素的修改-----------------------------------')
d1={'张三': 10, 'lisi': 20, 'wangwu': 30, '陈六': 40}
d1['陈六']=60
print(d1)



print('---------------------------获取字典所有的key-----------------------------------')
d1={'张三': 10, 'lisi': 20, 'wangwu': 30, '陈六': 40}
keys = d1.keys()
print(keys,type(keys)) #<class 'dict_keys'>
#将所有的key组成的视图转为列表
print(list(keys)) #['张三', 'lisi', 'wangwu', '陈六']


print('---------------------------获取字典所有的values-----------------------------------')
d1={'张三': 10, 'lisi': 20, 'wangwu': 30, '陈六': 40}
values = d1.values()
print(values,type(values)) #<class 'dict_values'>
#将value转为列表
print(list(values)) #[10, 20, 30, 40]



print('-------------------------获取字典所有的key values键值对-------------------------------')
d1={'张三': 10, 'lisi': 20, 'wangwu': 30, '陈六': 40}
items = d1.items()
print(items,type(items)) #<class 'dict_items'>   dict_items([('张三', 10), ('lisi', 20), ('wangwu', 30), ('陈六', 40)])
#将items转为列表
print(list(items)) #[('张三', 10), ('lisi', 20), ('wangwu', 30), ('陈六', 40)] 转换后的元素是由元组组成



print('--------------------------字典元素的遍历-----------------------------------')
d1={'张三': 10, 'lisi': 20, 'wangwu': 30, '陈六': 40}
for items in d1:
    print(items,d1[items],d1.get(items))  #输出的是字典所有的键 张三、lisi、wangwu、陈六



print('--------------------------字典元素的特点-----------------------------------')
#键key不允许重复
d1 = {'张三': 10,'张三': 20}
print(d1) #{'张三': 20}  被覆盖

#值value可以重复
d1 = {'张三': 10,'李四': 10}
print(d1) #{'张三': 10, '李四': 10}

#字典元素无序 不可指定元素位置插入

#字典中的key是不可变对象
#列表是可变对象 不能用于字典的key
l1 = [1,3]
#d1 = {l1,1} #报错 列表不能用于字典的key

#列表、字典可以根据需要动态伸缩大小

#字典会浪费较大内存 以空间换时间（查询快 浪费存储空间）



print('--------------------------字典生成式-----------------------------------')
#内置函数zip()
items=['fruits','books','others']
prices=[96,78,85,100,200]
d1 = {item:price  for item,price in zip(items,prices)}
print(d1) #{'fruits': 96, 'books': 78, 'others': 85} 若两个列表个数不对应 会以短的为准
#upper() 将字母转为大写
d1 = {item.upper():price  for item,price in zip(items,prices)}
print(d1) #{'FRUITS': 96, 'BOOKS': 78, 'OTHERS': 85}